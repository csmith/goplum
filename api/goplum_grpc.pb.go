// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: goplum.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoPlum_Results_FullMethodName      = "/api.GoPlum/Results"
	GoPlum_GetChecks_FullMethodName    = "/api.GoPlum/GetChecks"
	GoPlum_GetCheck_FullMethodName     = "/api.GoPlum/GetCheck"
	GoPlum_SuspendCheck_FullMethodName = "/api.GoPlum/SuspendCheck"
	GoPlum_ResumeCheck_FullMethodName  = "/api.GoPlum/ResumeCheck"
)

// GoPlumClient is the client API for GoPlum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoPlumClient interface {
	Results(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Result], error)
	GetChecks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CheckList, error)
	GetCheck(ctx context.Context, in *CheckName, opts ...grpc.CallOption) (*Check, error)
	SuspendCheck(ctx context.Context, in *CheckName, opts ...grpc.CallOption) (*Check, error)
	ResumeCheck(ctx context.Context, in *CheckName, opts ...grpc.CallOption) (*Check, error)
}

type goPlumClient struct {
	cc grpc.ClientConnInterface
}

func NewGoPlumClient(cc grpc.ClientConnInterface) GoPlumClient {
	return &goPlumClient{cc}
}

func (c *goPlumClient) Results(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Result], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GoPlum_ServiceDesc.Streams[0], GoPlum_Results_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, Result]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GoPlum_ResultsClient = grpc.ServerStreamingClient[Result]

func (c *goPlumClient) GetChecks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CheckList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckList)
	err := c.cc.Invoke(ctx, GoPlum_GetChecks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPlumClient) GetCheck(ctx context.Context, in *CheckName, opts ...grpc.CallOption) (*Check, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Check)
	err := c.cc.Invoke(ctx, GoPlum_GetCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPlumClient) SuspendCheck(ctx context.Context, in *CheckName, opts ...grpc.CallOption) (*Check, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Check)
	err := c.cc.Invoke(ctx, GoPlum_SuspendCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPlumClient) ResumeCheck(ctx context.Context, in *CheckName, opts ...grpc.CallOption) (*Check, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Check)
	err := c.cc.Invoke(ctx, GoPlum_ResumeCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoPlumServer is the server API for GoPlum service.
// All implementations must embed UnimplementedGoPlumServer
// for forward compatibility.
type GoPlumServer interface {
	Results(*Empty, grpc.ServerStreamingServer[Result]) error
	GetChecks(context.Context, *Empty) (*CheckList, error)
	GetCheck(context.Context, *CheckName) (*Check, error)
	SuspendCheck(context.Context, *CheckName) (*Check, error)
	ResumeCheck(context.Context, *CheckName) (*Check, error)
	mustEmbedUnimplementedGoPlumServer()
}

// UnimplementedGoPlumServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoPlumServer struct{}

func (UnimplementedGoPlumServer) Results(*Empty, grpc.ServerStreamingServer[Result]) error {
	return status.Errorf(codes.Unimplemented, "method Results not implemented")
}
func (UnimplementedGoPlumServer) GetChecks(context.Context, *Empty) (*CheckList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChecks not implemented")
}
func (UnimplementedGoPlumServer) GetCheck(context.Context, *CheckName) (*Check, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheck not implemented")
}
func (UnimplementedGoPlumServer) SuspendCheck(context.Context, *CheckName) (*Check, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendCheck not implemented")
}
func (UnimplementedGoPlumServer) ResumeCheck(context.Context, *CheckName) (*Check, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeCheck not implemented")
}
func (UnimplementedGoPlumServer) mustEmbedUnimplementedGoPlumServer() {}
func (UnimplementedGoPlumServer) testEmbeddedByValue()                {}

// UnsafeGoPlumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoPlumServer will
// result in compilation errors.
type UnsafeGoPlumServer interface {
	mustEmbedUnimplementedGoPlumServer()
}

func RegisterGoPlumServer(s grpc.ServiceRegistrar, srv GoPlumServer) {
	// If the following call pancis, it indicates UnimplementedGoPlumServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoPlum_ServiceDesc, srv)
}

func _GoPlum_Results_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoPlumServer).Results(m, &grpc.GenericServerStream[Empty, Result]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GoPlum_ResultsServer = grpc.ServerStreamingServer[Result]

func _GoPlum_GetChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPlumServer).GetChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPlum_GetChecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPlumServer).GetChecks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPlum_GetCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPlumServer).GetCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPlum_GetCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPlumServer).GetCheck(ctx, req.(*CheckName))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPlum_SuspendCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPlumServer).SuspendCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPlum_SuspendCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPlumServer).SuspendCheck(ctx, req.(*CheckName))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPlum_ResumeCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPlumServer).ResumeCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoPlum_ResumeCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPlumServer).ResumeCheck(ctx, req.(*CheckName))
	}
	return interceptor(ctx, in, info, handler)
}

// GoPlum_ServiceDesc is the grpc.ServiceDesc for GoPlum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoPlum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.GoPlum",
	HandlerType: (*GoPlumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChecks",
			Handler:    _GoPlum_GetChecks_Handler,
		},
		{
			MethodName: "GetCheck",
			Handler:    _GoPlum_GetCheck_Handler,
		},
		{
			MethodName: "SuspendCheck",
			Handler:    _GoPlum_SuspendCheck_Handler,
		},
		{
			MethodName: "ResumeCheck",
			Handler:    _GoPlum_ResumeCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Results",
			Handler:       _GoPlum_Results_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "goplum.proto",
}
